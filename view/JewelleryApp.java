/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.jewelleryapp.view;

import com.jewelleryapp.controller.algorithms.BinarySearch;
import com.jewelleryapp.controller.algorithms.InsertionSort;
import com.jewelleryapp.controller.algorithms.MergeSort;
import com.jewelleryapp.controller.algorithms.SelectionSort;
import com.jewelleryapp.model.JewelleryModel;
import com.jewelleryapp.util.ValidationUtil;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 * LMUID: 23048637
 *
 * @author Natasha Babu
 */
public class JewelleryApp extends javax.swing.JFrame {

    private ArrayList<JewelleryModel> jewelleryList = new ArrayList();
    private ArrayList<JewelleryModel> necklaceList = new ArrayList();
    private ArrayList<JewelleryModel> braceletList = new ArrayList();
    private ArrayList<JewelleryModel> ringList = new ArrayList();
    private ArrayList<JewelleryModel> earringsList = new ArrayList();
    private java.awt.CardLayout cardLayout;

    /**
     * Constructor for the JewelleryApp class. 
     * Initializes the components, sets up the layout, 
     * initializes the jewellery data, and starts the progress/loading screen.
     */
    public JewelleryApp() {
        initComponents();
        initializeLayout(); //Set up CardLayout and add screens
        initializeData(); //Initialize jewellery data and table
        startProgress(); //Show loading screen and initiate progress
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        pnlLoginScreen = new javax.swing.JPanel();
        pnlLoginLeft = new javax.swing.JPanel();
        lblLoginLogo = new javax.swing.JLabel();
        lblLoginTitle = new javax.swing.JLabel();
        lblLoginSubTitle = new javax.swing.JLabel();
        txtFldUsername = new javax.swing.JTextField();
        lblForgotPwd = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        pwdFldPwd = new javax.swing.JPasswordField();
        pnlMainScreen = new javax.swing.JPanel();
        pnlMainBar = new javax.swing.JPanel();
        lblMainLogo = new javax.swing.JLabel();
        lnlMainSlogan = new javax.swing.JLabel();
        pnlMainInfo = new javax.swing.JPanel();
        tabPaneMain = new javax.swing.JTabbedPane();
        pnlHome = new javax.swing.JPanel();
        lblJewellery1 = new javax.swing.JLabel();
        lblHeading1 = new javax.swing.JLabel();
        lblHeading2 = new javax.swing.JLabel();
        lblHLine1 = new javax.swing.JLabel();
        lblHLine2 = new javax.swing.JLabel();
        lblHLine3 = new javax.swing.JLabel();
        lblHLine4 = new javax.swing.JLabel();
        pnlJewellery = new javax.swing.JPanel();
        tabPaneJ = new javax.swing.JTabbedPane();
        pnlNecklace = new javax.swing.JPanel();
        spTblNecklace = new javax.swing.JScrollPane();
        tblNecklace = new javax.swing.JTable();
        cbNecklace = new javax.swing.JComboBox<>();
        txtFldSearchN = new javax.swing.JTextField();
        lblSearchN = new javax.swing.JLabel();
        pnlBracelet = new javax.swing.JPanel();
        spTblBracelet = new javax.swing.JScrollPane();
        tblBracelet = new javax.swing.JTable();
        cbBracelet = new javax.swing.JComboBox<>();
        txtFldSearchB = new javax.swing.JTextField();
        lblSearchB = new javax.swing.JLabel();
        pnlRing = new javax.swing.JPanel();
        spTblRings = new javax.swing.JScrollPane();
        tblRings = new javax.swing.JTable();
        cbRing = new javax.swing.JComboBox<>();
        txtFldSearchR = new javax.swing.JTextField();
        lblSearchR = new javax.swing.JLabel();
        pnlEarRing = new javax.swing.JPanel();
        spTblEarRings = new javax.swing.JScrollPane();
        tblEarRings = new javax.swing.JTable();
        cbEarrings = new javax.swing.JComboBox<>();
        txtFldSearchER = new javax.swing.JTextField();
        lblSearchER = new javax.swing.JLabel();
        pnlAdminControl = new javax.swing.JPanel();
        lnlMainSlogan1 = new javax.swing.JLabel();
        txtFldPCode = new javax.swing.JTextField();
        txtFldPName = new javax.swing.JTextField();
        txtFldJType = new javax.swing.JTextField();
        txtFldDiamond = new javax.swing.JTextField();
        txtFldStock = new javax.swing.JTextField();
        txtFldMaterial = new javax.swing.JTextField();
        txtFldGold = new javax.swing.JTextField();
        txtFldTCost = new javax.swing.JTextField();
        btnAddDetails = new javax.swing.JButton();
        btnUpdateDetails = new javax.swing.JButton();
        btnDeleteDetails = new javax.swing.JButton();
        pnlAboutUs = new javax.swing.JPanel();
        lblJewellery2 = new javax.swing.JLabel();
        lblJewellery3 = new javax.swing.JLabel();
        lblAboutUs = new javax.swing.JLabel();
        lblAUline1 = new javax.swing.JLabel();
        lblAUline2 = new javax.swing.JLabel();
        lblAUline3 = new javax.swing.JLabel();
        lblAUline4 = new javax.swing.JLabel();
        lblAUline5 = new javax.swing.JLabel();
        lblAUline6 = new javax.swing.JLabel();
        lblAUline7 = new javax.swing.JLabel();
        lblAUline8 = new javax.swing.JLabel();
        lblAUline9 = new javax.swing.JLabel();
        pnlContactUs = new javax.swing.JPanel();
        lblMail = new javax.swing.JLabel();
        lblContactUs = new javax.swing.JLabel();
        lblCUline1 = new javax.swing.JLabel();
        lblCUline2 = new javax.swing.JLabel();
        lblYourInfo = new javax.swing.JLabel();
        lblReachOut = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPhoneNo = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        txtFldFName = new javax.swing.JTextField();
        txtFldEmail = new javax.swing.JTextField();
        txtFldPhNo = new javax.swing.JTextField();
        txtFldMessage = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        btnCopyright = new javax.swing.JLabel();
        pnlMainLoadingScreen = new javax.swing.JPanel();
        lblLoadingLogo = new javax.swing.JLabel();
        pgBarSplashScreen = new javax.swing.JProgressBar(0,100);
        lblLoading = new javax.swing.JLabel();

        pnlLoginScreen.setBackground(new java.awt.Color(223, 192, 129));
        pnlLoginScreen.setPreferredSize(new java.awt.Dimension(818, 538));

        pnlLoginLeft.setBackground(new java.awt.Color(0, 0, 0));

        lblLoginLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jewelleryapp/resources/velouraLogin.png"))); // NOI18N

        javax.swing.GroupLayout pnlLoginLeftLayout = new javax.swing.GroupLayout(pnlLoginLeft);
        pnlLoginLeft.setLayout(pnlLoginLeftLayout);
        pnlLoginLeftLayout.setHorizontalGroup(
            pnlLoginLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLeftLayout.createSequentialGroup()
                .addComponent(lblLoginLogo, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlLoginLeftLayout.setVerticalGroup(
            pnlLoginLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLeftLayout.createSequentialGroup()
                .addComponent(lblLoginLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 31, Short.MAX_VALUE))
        );

        lblLoginTitle.setFont(new java.awt.Font("Savoye LET", 0, 48)); // NOI18N
        lblLoginTitle.setText("Welcome");
        lblLoginTitle.setSize(new java.awt.Dimension(54, 17));

        lblLoginSubTitle.setFont(new java.awt.Font("Savoye LET", 0, 24)); // NOI18N
        lblLoginSubTitle.setText("Login to your account");

        txtFldUsername.setBackground(new java.awt.Color(223, 192, 129));
        txtFldUsername.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "UserName", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Savoye LET", 0, 24))); // NOI18N

        lblForgotPwd.setFont(new java.awt.Font("Savoye LET", 0, 18)); // NOI18N
        lblForgotPwd.setText("Forgot your password?");

        btnLogin.setBackground(new java.awt.Color(0, 0, 0));
        btnLogin.setFont(new java.awt.Font("Savoye LET", 0, 24)); // NOI18N
        btnLogin.setForeground(new java.awt.Color(245, 216, 147));
        btnLogin.setText("Login");
        btnLogin.setBorder(null);
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        pwdFldPwd.setBackground(new java.awt.Color(223, 192, 129));
        pwdFldPwd.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Savoye LET", 0, 24))); // NOI18N

        javax.swing.GroupLayout pnlLoginScreenLayout = new javax.swing.GroupLayout(pnlLoginScreen);
        pnlLoginScreen.setLayout(pnlLoginScreenLayout);
        pnlLoginScreenLayout.setHorizontalGroup(
            pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                .addComponent(pnlLoginLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                            .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                                    .addGap(149, 149, 149)
                                    .addComponent(lblLoginTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                                    .addGap(136, 136, 136)
                                    .addComponent(lblLoginSubTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(43, 43, 43))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginScreenLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtFldUsername, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pwdFldPwd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblForgotPwd))))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        pnlLoginScreenLayout.setVerticalGroup(
            pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLoginLeft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(lblLoginTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblLoginSubTitle)
                .addGap(18, 18, 18)
                .addComponent(txtFldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pwdFldPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblForgotPwd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMainScreen.setBackground(new java.awt.Color(223, 192, 129));
        pnlMainScreen.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        pnlMainScreen.setMinimumSize(new java.awt.Dimension(100, 100));
        pnlMainScreen.setPreferredSize(new java.awt.Dimension(818, 538));

        pnlMainBar.setBackground(new java.awt.Color(0, 0, 0));

        lblMainLogo.setForeground(new java.awt.Color(255, 255, 255));
        lblMainLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jewelleryapp/resources/velouraLogo.png"))); // NOI18N

        lnlMainSlogan.setFont(new java.awt.Font("Savoye LET", 0, 36)); // NOI18N
        lnlMainSlogan.setForeground(new java.awt.Color(245, 216, 147));
        lnlMainSlogan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lnlMainSlogan.setText("Where Elegance Meets Eternal Shine");
        lnlMainSlogan.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout pnlMainBarLayout = new javax.swing.GroupLayout(pnlMainBar);
        pnlMainBar.setLayout(pnlMainBarLayout);
        pnlMainBarLayout.setHorizontalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addComponent(lblMainLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lnlMainSlogan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMainBarLayout.setVerticalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblMainLogo, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lnlMainSlogan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlMainInfo.setBackground(new java.awt.Color(223, 192, 129));

        tabPaneMain.setBackground(java.awt.Color.black);
        tabPaneMain.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(223, 192, 129)));
        tabPaneMain.setForeground(new java.awt.Color(223, 192, 129));
        tabPaneMain.setFont(new java.awt.Font("Kokonor", 0, 14)); // NOI18N
        tabPaneMain.setPreferredSize(new java.awt.Dimension(818, 406));

        pnlHome.setBackground(new java.awt.Color(245, 243, 241));
        pnlHome.setPreferredSize(new java.awt.Dimension(818, 406));

        lblJewellery1.setBackground(new java.awt.Color(0, 0, 0));
        lblJewellery1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jewelleryapp/resources/Veloura.png"))); // NOI18N

        lblHeading1.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        lblHeading1.setText("SPARKLE  SMARTER");

        lblHeading2.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 24)); // NOI18N
        lblHeading2.setText("From Inventory To Invoices");

        lblHLine1.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 18)); // NOI18N
        lblHLine1.setText("Discover a smarter way to manage your precious treasures with Veloura.");

        lblHLine2.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 18)); // NOI18N
        lblHLine2.setText("Designed to combine elegance with efficiency.");

        lblHLine3.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 18)); // NOI18N
        lblHLine3.setText("Let Veloura transform the way you care for your jewellery – because every  ");

        lblHLine4.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 18)); // NOI18N
        lblHLine4.setText("piece has a story, and every story deserves to shine.");

        javax.swing.GroupLayout pnlHomeLayout = new javax.swing.GroupLayout(pnlHome);
        pnlHome.setLayout(pnlHomeLayout);
        pnlHomeLayout.setHorizontalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addComponent(lblJewellery1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHomeLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblHeading1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHeading2)
                            .addComponent(lblHLine3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblHLine1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(pnlHomeLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(lblHLine4))
                    .addGroup(pnlHomeLayout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(lblHLine2)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        pnlHomeLayout.setVerticalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addGroup(pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblJewellery1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlHomeLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblHeading1)
                        .addGap(18, 18, 18)
                        .addComponent(lblHeading2)
                        .addGap(18, 18, 18)
                        .addComponent(lblHLine1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblHLine2)
                        .addGap(36, 36, 36)
                        .addComponent(lblHLine3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblHLine4)))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        tabPaneMain.addTab("Home", pnlHome);

        pnlJewellery.setBackground(new java.awt.Color(223, 192, 129));
        pnlJewellery.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(223, 192, 129)));
        pnlJewellery.setPreferredSize(new java.awt.Dimension(818, 406));

        tabPaneJ.setBackground(java.awt.Color.black);
        tabPaneJ.setForeground(new java.awt.Color(245, 216, 147));
        tabPaneJ.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        tabPaneJ.setFont(new java.awt.Font("Kokonor", 0, 14)); // NOI18N

        pnlNecklace.setBackground(new java.awt.Color(223, 192, 129));

        spTblNecklace.setBackground(new java.awt.Color(0, 0, 0));
        spTblNecklace.setForeground(new java.awt.Color(255, 255, 255));
        spTblNecklace.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N

        tblNecklace.setBackground(new java.awt.Color(0, 0, 0));
        tblNecklace.setForeground(new java.awt.Color(255, 255, 255));
        tblNecklace.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Code", "Product Name", "Material", "Diamonds (Carats)", "Gold (K)", "Stock", "Total Cost ($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spTblNecklace.setViewportView(tblNecklace);
        if (tblNecklace.getColumnModel().getColumnCount() > 0) {
            tblNecklace.getColumnModel().getColumn(0).setResizable(false);
            tblNecklace.getColumnModel().getColumn(1).setResizable(false);
            tblNecklace.getColumnModel().getColumn(2).setResizable(false);
            tblNecklace.getColumnModel().getColumn(3).setResizable(false);
            tblNecklace.getColumnModel().getColumn(4).setResizable(false);
            tblNecklace.getColumnModel().getColumn(5).setResizable(false);
            tblNecklace.getColumnModel().getColumn(6).setResizable(false);
        }

        cbNecklace.setBackground(new java.awt.Color(0, 0, 0));
        cbNecklace.setFont(new java.awt.Font("Bodoni 72", 0, 15)); // NOI18N
        cbNecklace.setForeground(new java.awt.Color(255, 255, 255));
        cbNecklace.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort By", "Code (Asc)", "Code (Desc)", "Name (A-Z)", "Name (Z-A)", "Total Cost (Cheap)", "Total Cost (Expensive)" }));
        cbNecklace.setToolTipText("");
        cbNecklace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNecklaceActionPerformed(evt);
            }
        });

        txtFldSearchN.setBackground(new java.awt.Color(0, 0, 0));
        txtFldSearchN.setFont(new java.awt.Font("Bodoni 72", 0, 13)); // NOI18N
        txtFldSearchN.setForeground(new java.awt.Color(255, 255, 255));
        txtFldSearchN.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni 72", 0, 13), new java.awt.Color(255, 255, 255))); // NOI18N

        lblSearchN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jewelleryapp/resources/search icon.png"))); // NOI18N
        lblSearchN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSearchNMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlNecklaceLayout = new javax.swing.GroupLayout(pnlNecklace);
        pnlNecklace.setLayout(pnlNecklaceLayout);
        pnlNecklaceLayout.setHorizontalGroup(
            pnlNecklaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spTblNecklace, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
            .addGroup(pnlNecklaceLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbNecklace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFldSearchN, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSearchN, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlNecklaceLayout.setVerticalGroup(
            pnlNecklaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNecklaceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNecklaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFldSearchN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbNecklace)
                    .addComponent(lblSearchN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblNecklace, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        tabPaneJ.addTab("Necklace", pnlNecklace);

        pnlBracelet.setBackground(new java.awt.Color(223, 192, 129));

        tblBracelet.setBackground(java.awt.Color.black);
        tblBracelet.setForeground(new java.awt.Color(255, 255, 255));
        tblBracelet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Code", "Product Name", "Material", "Diamonds (Carats)", "Gold (K)", "Stock", "Total Cost ($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spTblBracelet.setViewportView(tblBracelet);
        if (tblBracelet.getColumnModel().getColumnCount() > 0) {
            tblBracelet.getColumnModel().getColumn(0).setResizable(false);
            tblBracelet.getColumnModel().getColumn(1).setResizable(false);
            tblBracelet.getColumnModel().getColumn(2).setResizable(false);
            tblBracelet.getColumnModel().getColumn(3).setResizable(false);
            tblBracelet.getColumnModel().getColumn(4).setResizable(false);
            tblBracelet.getColumnModel().getColumn(5).setResizable(false);
            tblBracelet.getColumnModel().getColumn(6).setResizable(false);
        }

        cbBracelet.setBackground(new java.awt.Color(0, 0, 0));
        cbBracelet.setFont(new java.awt.Font("Bodoni 72", 0, 15)); // NOI18N
        cbBracelet.setForeground(new java.awt.Color(255, 255, 255));
        cbBracelet.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort By", "Code (Asc)", "Code (Desc)", "Name (A-Z)", "Name (Z-A)", "Total Cost (Cheap)", "Total Cost (Expensive)" }));
        cbBracelet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBraceletActionPerformed(evt);
            }
        });

        txtFldSearchB.setBackground(new java.awt.Color(0, 0, 0));
        txtFldSearchB.setFont(new java.awt.Font("Bodoni 72", 0, 13)); // NOI18N
        txtFldSearchB.setForeground(new java.awt.Color(255, 255, 255));
        txtFldSearchB.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni 72", 0, 13), new java.awt.Color(255, 255, 255))); // NOI18N

        lblSearchB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jewelleryapp/resources/search icon.png"))); // NOI18N
        lblSearchB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSearchBMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlBraceletLayout = new javax.swing.GroupLayout(pnlBracelet);
        pnlBracelet.setLayout(pnlBraceletLayout);
        pnlBraceletLayout.setHorizontalGroup(
            pnlBraceletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spTblBracelet, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
            .addGroup(pnlBraceletLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbBracelet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFldSearchB, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSearchB, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlBraceletLayout.setVerticalGroup(
            pnlBraceletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBraceletLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBraceletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbBracelet)
                    .addGroup(pnlBraceletLayout.createSequentialGroup()
                        .addComponent(txtFldSearchB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblSearchB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblBracelet, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabPaneJ.addTab("Bracelet", pnlBracelet);

        pnlRing.setBackground(new java.awt.Color(223, 192, 129));

        tblRings.setBackground(java.awt.Color.black);
        tblRings.setForeground(new java.awt.Color(255, 255, 255));
        tblRings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Code", "Product Name", "Material", "Diamonds (Carats)", "Gold (K)", "Stock", "Total Cost ($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spTblRings.setViewportView(tblRings);
        if (tblRings.getColumnModel().getColumnCount() > 0) {
            tblRings.getColumnModel().getColumn(0).setResizable(false);
            tblRings.getColumnModel().getColumn(1).setResizable(false);
            tblRings.getColumnModel().getColumn(2).setResizable(false);
            tblRings.getColumnModel().getColumn(3).setResizable(false);
            tblRings.getColumnModel().getColumn(4).setResizable(false);
            tblRings.getColumnModel().getColumn(5).setResizable(false);
            tblRings.getColumnModel().getColumn(6).setResizable(false);
        }

        cbRing.setBackground(new java.awt.Color(0, 0, 0));
        cbRing.setFont(new java.awt.Font("Bodoni 72", 0, 15)); // NOI18N
        cbRing.setForeground(new java.awt.Color(255, 255, 255));
        cbRing.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort By", "Code (Asc)", "Code (Desc)", "Name (A-Z)", "Name (Z-A)", "Total Cost (Cheap)", "Total Cost (Expensive)" }));
        cbRing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRingActionPerformed(evt);
            }
        });

        txtFldSearchR.setBackground(new java.awt.Color(0, 0, 0));
        txtFldSearchR.setFont(new java.awt.Font("Bodoni 72", 0, 13)); // NOI18N
        txtFldSearchR.setForeground(new java.awt.Color(255, 255, 255));
        txtFldSearchR.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni 72", 0, 13), new java.awt.Color(255, 255, 255))); // NOI18N

        lblSearchR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jewelleryapp/resources/search icon.png"))); // NOI18N
        lblSearchR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSearchRMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlRingLayout = new javax.swing.GroupLayout(pnlRing);
        pnlRing.setLayout(pnlRingLayout);
        pnlRingLayout.setHorizontalGroup(
            pnlRingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRingLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbRing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFldSearchR, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSearchR, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(spTblRings, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
        );
        pnlRingLayout.setVerticalGroup(
            pnlRingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbRing)
                    .addGroup(pnlRingLayout.createSequentialGroup()
                        .addComponent(txtFldSearchR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblSearchR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblRings, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabPaneJ.addTab("Ring", pnlRing);

        pnlEarRing.setBackground(new java.awt.Color(223, 192, 129));

        spTblEarRings.setBackground(new java.awt.Color(245, 216, 147));

        tblEarRings.setBackground(java.awt.Color.black);
        tblEarRings.setForeground(new java.awt.Color(255, 255, 255));
        tblEarRings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Code", "Product Name", "Material", "Diamonds (Carats)", "Gold (K)", "Stock", "Total Cost ($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spTblEarRings.setViewportView(tblEarRings);
        if (tblEarRings.getColumnModel().getColumnCount() > 0) {
            tblEarRings.getColumnModel().getColumn(0).setResizable(false);
            tblEarRings.getColumnModel().getColumn(1).setResizable(false);
            tblEarRings.getColumnModel().getColumn(2).setResizable(false);
            tblEarRings.getColumnModel().getColumn(3).setResizable(false);
            tblEarRings.getColumnModel().getColumn(4).setResizable(false);
            tblEarRings.getColumnModel().getColumn(5).setResizable(false);
            tblEarRings.getColumnModel().getColumn(6).setResizable(false);
        }

        cbEarrings.setBackground(new java.awt.Color(0, 0, 0));
        cbEarrings.setFont(new java.awt.Font("Bodoni 72", 0, 15)); // NOI18N
        cbEarrings.setForeground(new java.awt.Color(255, 255, 255));
        cbEarrings.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort By", "Code (Asc)", "Code (Desc)", "Name (A-Z)", "Name (Z-A)", "Total Cost (Cheap)", "Total Cost (Expensive)" }));
        cbEarrings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEarringsActionPerformed(evt);
            }
        });

        txtFldSearchER.setBackground(new java.awt.Color(0, 0, 0));
        txtFldSearchER.setFont(new java.awt.Font("Bodoni 72", 0, 13)); // NOI18N
        txtFldSearchER.setForeground(new java.awt.Color(255, 255, 255));
        txtFldSearchER.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni 72", 0, 13), new java.awt.Color(255, 255, 255))); // NOI18N

        lblSearchER.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jewelleryapp/resources/search icon.png"))); // NOI18N
        lblSearchER.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSearchERMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlEarRingLayout = new javax.swing.GroupLayout(pnlEarRing);
        pnlEarRing.setLayout(pnlEarRingLayout);
        pnlEarRingLayout.setHorizontalGroup(
            pnlEarRingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spTblEarRings, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEarRingLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbEarrings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFldSearchER, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSearchER, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlEarRingLayout.setVerticalGroup(
            pnlEarRingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEarRingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEarRingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbEarrings)
                    .addGroup(pnlEarRingLayout.createSequentialGroup()
                        .addComponent(txtFldSearchER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblSearchER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblEarRings, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabPaneJ.addTab("Earrings", pnlEarRing);

        javax.swing.GroupLayout pnlJewelleryLayout = new javax.swing.GroupLayout(pnlJewellery);
        pnlJewellery.setLayout(pnlJewelleryLayout);
        pnlJewelleryLayout.setHorizontalGroup(
            pnlJewelleryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPaneJ)
        );
        pnlJewelleryLayout.setVerticalGroup(
            pnlJewelleryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlJewelleryLayout.createSequentialGroup()
                .addComponent(tabPaneJ, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        tabPaneMain.addTab("Jewellery", pnlJewellery);

        pnlAdminControl.setBackground(new java.awt.Color(223, 192, 129));
        pnlAdminControl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(223, 192, 129)));
        pnlAdminControl.setPreferredSize(new java.awt.Dimension(818, 406));

        lnlMainSlogan1.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        lnlMainSlogan1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lnlMainSlogan1.setText("Jewellery Management");
        lnlMainSlogan1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        txtFldPCode.setBackground(new java.awt.Color(0, 0, 0));
        txtFldPCode.setFont(new java.awt.Font("Bodoni 72", 0, 15)); // NOI18N
        txtFldPCode.setForeground(new java.awt.Color(255, 255, 255));
        txtFldPCode.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Product Code", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Kokonor", 0, 18), new java.awt.Color(245, 216, 147))); // NOI18N

        txtFldPName.setBackground(new java.awt.Color(0, 0, 0));
        txtFldPName.setFont(new java.awt.Font("Bodoni 72", 0, 15)); // NOI18N
        txtFldPName.setForeground(new java.awt.Color(255, 255, 255));
        txtFldPName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Product Name", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Kokonor", 0, 18), new java.awt.Color(245, 216, 147))); // NOI18N

        txtFldJType.setBackground(new java.awt.Color(0, 0, 0));
        txtFldJType.setFont(new java.awt.Font("Bodoni 72", 0, 15)); // NOI18N
        txtFldJType.setForeground(new java.awt.Color(255, 255, 255));
        txtFldJType.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Type", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Kokonor", 0, 18), new java.awt.Color(245, 216, 147))); // NOI18N

        txtFldDiamond.setBackground(new java.awt.Color(0, 0, 0));
        txtFldDiamond.setFont(new java.awt.Font("Bodoni 72", 0, 15)); // NOI18N
        txtFldDiamond.setForeground(new java.awt.Color(255, 255, 255));
        txtFldDiamond.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Diamond (Carats)", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Kokonor", 0, 18), new java.awt.Color(245, 216, 147))); // NOI18N

        txtFldStock.setBackground(new java.awt.Color(0, 0, 0));
        txtFldStock.setFont(new java.awt.Font("Bodoni 72", 0, 15)); // NOI18N
        txtFldStock.setForeground(new java.awt.Color(255, 255, 255));
        txtFldStock.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Stock", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Kokonor", 0, 18), new java.awt.Color(245, 216, 147))); // NOI18N

        txtFldMaterial.setBackground(new java.awt.Color(0, 0, 0));
        txtFldMaterial.setFont(new java.awt.Font("Bodoni 72", 0, 15)); // NOI18N
        txtFldMaterial.setForeground(new java.awt.Color(255, 255, 255));
        txtFldMaterial.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Material", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Kokonor", 0, 18), new java.awt.Color(245, 216, 147))); // NOI18N

        txtFldGold.setBackground(new java.awt.Color(0, 0, 0));
        txtFldGold.setFont(new java.awt.Font("Bodoni 72", 0, 15)); // NOI18N
        txtFldGold.setForeground(new java.awt.Color(255, 255, 255));
        txtFldGold.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gold (K)", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Kokonor", 0, 18), new java.awt.Color(245, 216, 147))); // NOI18N

        txtFldTCost.setBackground(new java.awt.Color(0, 0, 0));
        txtFldTCost.setFont(new java.awt.Font("Bodoni 72", 0, 15)); // NOI18N
        txtFldTCost.setForeground(new java.awt.Color(255, 255, 255));
        txtFldTCost.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Total Cost", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Kokonor", 0, 18), new java.awt.Color(245, 216, 147))); // NOI18N

        btnAddDetails.setBackground(new java.awt.Color(0, 0, 0));
        btnAddDetails.setFont(new java.awt.Font("Kokonor", 0, 18)); // NOI18N
        btnAddDetails.setForeground(new java.awt.Color(245, 216, 147));
        btnAddDetails.setText("Add Details");
        btnAddDetails.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDetailsActionPerformed(evt);
            }
        });

        btnUpdateDetails.setBackground(new java.awt.Color(0, 0, 0));
        btnUpdateDetails.setFont(new java.awt.Font("Kokonor", 0, 18)); // NOI18N
        btnUpdateDetails.setForeground(new java.awt.Color(245, 216, 147));
        btnUpdateDetails.setText("Update Details");
        btnUpdateDetails.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnUpdateDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDetailsActionPerformed(evt);
            }
        });

        btnDeleteDetails.setBackground(new java.awt.Color(0, 0, 0));
        btnDeleteDetails.setFont(new java.awt.Font("Kokonor", 0, 18)); // NOI18N
        btnDeleteDetails.setForeground(new java.awt.Color(245, 216, 147));
        btnDeleteDetails.setText("Delete Details");
        btnDeleteDetails.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeleteDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAdminControlLayout = new javax.swing.GroupLayout(pnlAdminControl);
        pnlAdminControl.setLayout(pnlAdminControlLayout);
        pnlAdminControlLayout.setHorizontalGroup(
            pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminControlLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAdminControlLayout.createSequentialGroup()
                        .addGroup(pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAdminControlLayout.createSequentialGroup()
                                .addComponent(txtFldPCode, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addGroup(pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFldMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFldPName, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(txtFldStock, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFldGold, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFldJType, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addGroup(pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFldDiamond, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFldTCost, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlAdminControlLayout.createSequentialGroup()
                        .addGroup(pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lnlMainSlogan1)
                            .addGroup(pnlAdminControlLayout.createSequentialGroup()
                                .addGap(108, 108, 108)
                                .addComponent(btnAddDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(btnUpdateDetails)
                                .addGap(67, 67, 67)
                                .addComponent(btnDeleteDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(31, 31, 31))
        );
        pnlAdminControlLayout.setVerticalGroup(
            pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminControlLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(lnlMainSlogan1)
                .addGap(18, 18, 18)
                .addGroup(pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFldDiamond, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldJType, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldPName, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldPCode, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFldStock, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldGold, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldTCost, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        tabPaneMain.addTab("Admin Control", pnlAdminControl);

        pnlAboutUs.setBackground(new java.awt.Color(255, 255, 255));
        pnlAboutUs.setPreferredSize(new java.awt.Dimension(818, 406));

        lblJewellery2.setBackground(new java.awt.Color(255, 255, 255));
        lblJewellery2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jewelleryapp/resources/EarRing.png"))); // NOI18N

        lblJewellery3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jewelleryapp/resources/Bracelet.png"))); // NOI18N
        lblJewellery3.setText("jLabel5");

        lblAboutUs.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        lblAboutUs.setText("About Us");

        lblAUline1.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 16)); // NOI18N
        lblAUline1.setText("At Veloura, we believe every piece of jewellery tells a story—of love, legacy, and moments worth");

        lblAUline2.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 16)); // NOI18N
        lblAUline2.setText("treasuring. Our mission is to empower collectors, connoisseurs, and jewelry enthusiasts with");

        lblAUline3.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 16)); // NOI18N
        lblAUline3.setText("a seamless solution to manage and safeguard their valuable collections.");

        lblAUline4.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 16)); // NOI18N
        lblAUline4.setText("Born from a passion for luxury and technology, Veloura ");

        lblAUline5.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 16)); // NOI18N
        lblAUline5.setText("combines modern innovation with timeless elegance.");

        lblAUline6.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 16)); // NOI18N
        lblAUline6.setText("Whether it’s a family heirloom or a personal indulgence, we");

        lblAUline7.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 16)); // NOI18N
        lblAUline7.setText("understand the importance of every piece in your collection.");

        lblAUline8.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 16)); // NOI18N
        lblAUline8.setText("That’s why we’ve created Veloura—to provide you with a ");

        lblAUline9.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 16)); // NOI18N
        lblAUline9.setText("reliable, intuitive, and elegant way to cherish your treasures.");

        javax.swing.GroupLayout pnlAboutUsLayout = new javax.swing.GroupLayout(pnlAboutUs);
        pnlAboutUs.setLayout(pnlAboutUsLayout);
        pnlAboutUsLayout.setHorizontalGroup(
            pnlAboutUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAboutUsLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblJewellery2)
                .addGap(40, 40, 40)
                .addGroup(pnlAboutUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAboutUsLayout.createSequentialGroup()
                        .addGroup(pnlAboutUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAUline1)
                            .addComponent(lblAboutUs)
                            .addComponent(lblAUline2)
                            .addComponent(lblAUline3))
                        .addGap(0, 32, Short.MAX_VALUE))
                    .addGroup(pnlAboutUsLayout.createSequentialGroup()
                        .addGroup(pnlAboutUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAUline4, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAUline5)
                            .addComponent(lblAUline6)
                            .addComponent(lblAUline7)
                            .addComponent(lblAUline8)
                            .addComponent(lblAUline9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblJewellery3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlAboutUsLayout.setVerticalGroup(
            pnlAboutUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAboutUsLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pnlAboutUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAboutUsLayout.createSequentialGroup()
                        .addComponent(lblAboutUs)
                        .addGap(18, 18, 18)
                        .addComponent(lblAUline1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAUline2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAUline3)
                        .addGap(18, 18, 18)
                        .addComponent(lblAUline4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAUline5))
                    .addComponent(lblJewellery2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAUline6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAUline7)
                .addGap(30, 30, 30)
                .addComponent(lblAUline8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAUline9)
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAboutUsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblJewellery3, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabPaneMain.addTab("About Us", pnlAboutUs);

        pnlContactUs.setBackground(new java.awt.Color(255, 255, 255));
        pnlContactUs.setPreferredSize(new java.awt.Dimension(818, 406));

        lblMail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jewelleryapp/resources/mail.jpg"))); // NOI18N

        lblContactUs.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        lblContactUs.setText("Contact Us");

        lblCUline1.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 16)); // NOI18N
        lblCUline1.setText("Join us on this journey to elevate how you manage your most precious assets.");

        lblCUline2.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 16)); // NOI18N
        lblCUline2.setText("With Veloura, your collection isn’t just organized—it’s celebrated.");

        lblYourInfo.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 18)); // NOI18N
        lblYourInfo.setText("Your Information");

        lblReachOut.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 18)); // NOI18N
        lblReachOut.setText("Reach Out To Us");

        lblEmail.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 14)); // NOI18N
        lblEmail.setText("Email:support@veloura.com ");

        lblPhoneNo.setFont(new java.awt.Font("Bodoni 72", 0, 14)); // NOI18N
        lblPhoneNo.setText("Phone Number: +1 (123) 456-7890");

        lblAddress.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 14)); // NOI18N
        lblAddress.setText("Address: Veloura HQ, Saint Mary's Street");

        txtFldFName.setBackground(new java.awt.Color(245, 216, 147));
        txtFldFName.setFont(new java.awt.Font("Bodoni 72", 0, 14)); // NOI18N
        txtFldFName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Full Name", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni 72 Smallcaps", 0, 14))); // NOI18N

        txtFldEmail.setBackground(new java.awt.Color(245, 216, 147));
        txtFldEmail.setFont(new java.awt.Font("Bodoni 72", 0, 14)); // NOI18N
        txtFldEmail.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Email Address", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni 72 Smallcaps", 0, 14))); // NOI18N

        txtFldPhNo.setBackground(new java.awt.Color(245, 216, 147));
        txtFldPhNo.setFont(new java.awt.Font("Bodoni 72", 0, 14)); // NOI18N
        txtFldPhNo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Phone Number", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni 72 Smallcaps", 0, 14))); // NOI18N

        txtFldMessage.setBackground(new java.awt.Color(245, 216, 147));
        txtFldMessage.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 14)); // NOI18N
        txtFldMessage.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Message (Optional)", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni 72 Smallcaps", 0, 14))); // NOI18N

        btnSubmit.setBackground(new java.awt.Color(245, 216, 147));
        btnSubmit.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 22)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlContactUsLayout = new javax.swing.GroupLayout(pnlContactUs);
        pnlContactUs.setLayout(pnlContactUsLayout);
        pnlContactUsLayout.setHorizontalGroup(
            pnlContactUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContactUsLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(pnlContactUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblYourInfo)
                    .addGroup(pnlContactUsLayout.createSequentialGroup()
                        .addGroup(pnlContactUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFldEmail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFldPhNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFldFName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlContactUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlContactUsLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(txtFldMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlContactUsLayout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(lblCUline2)
                    .addComponent(lblCUline1)
                    .addComponent(lblContactUs))
                .addGroup(pnlContactUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlContactUsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(lblMail, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addGroup(pnlContactUsLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(pnlContactUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmail)
                            .addComponent(lblPhoneNo)
                            .addComponent(lblReachOut))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContactUsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblAddress)
                .addContainerGap())
        );
        pnlContactUsLayout.setVerticalGroup(
            pnlContactUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContactUsLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnlContactUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlContactUsLayout.createSequentialGroup()
                        .addComponent(lblContactUs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCUline1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCUline2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblYourInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlContactUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlContactUsLayout.createSequentialGroup()
                                .addComponent(txtFldFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtFldMessage)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContactUsLayout.createSequentialGroup()
                        .addComponent(lblMail, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblReachOut)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlContactUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlContactUsLayout.createSequentialGroup()
                        .addGroup(pnlContactUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFldPhNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlContactUsLayout.createSequentialGroup()
                        .addGap(0, 6, Short.MAX_VALUE)
                        .addComponent(lblEmail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPhoneNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAddress)
                        .addGap(40, 40, 40))))
        );

        tabPaneMain.addTab("Contact Us", pnlContactUs);

        btnLogout.setBackground(new java.awt.Color(0, 0, 0));
        btnLogout.setFont(new java.awt.Font("Savoye LET", 0, 24)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(245, 216, 147));
        btnLogout.setText("Log Out");
        btnLogout.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        btnCopyright.setFont(new java.awt.Font("Bodoni 72", 0, 16)); // NOI18N
        btnCopyright.setText("Copyright © 2024 Veloura");

        javax.swing.GroupLayout pnlMainInfoLayout = new javax.swing.GroupLayout(pnlMainInfo);
        pnlMainInfo.setLayout(pnlMainInfoLayout);
        pnlMainInfoLayout.setHorizontalGroup(
            pnlMainInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainInfoLayout.createSequentialGroup()
                .addComponent(tabPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainInfoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCopyright)
                .addGap(262, 262, 262)
                .addComponent(btnLogout)
                .addContainerGap())
        );
        pnlMainInfoLayout.setVerticalGroup(
            pnlMainInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainInfoLayout.createSequentialGroup()
                .addComponent(tabPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlMainInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCopyright))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlMainScreenLayout = new javax.swing.GroupLayout(pnlMainScreen);
        pnlMainScreen.setLayout(pnlMainScreenLayout);
        pnlMainScreenLayout.setHorizontalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMainBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlMainInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlMainScreenLayout.setVerticalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                .addComponent(pnlMainBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMainInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlMainLoadingScreen.setBackground(new java.awt.Color(0, 0, 0));
        pnlMainLoadingScreen.setPreferredSize(new java.awt.Dimension(818, 538));

        lblLoadingLogo.setForeground(new java.awt.Color(255, 255, 255));
        lblLoadingLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoadingLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jewelleryapp/resources/velouraLoading.png"))); // NOI18N

        pgBarSplashScreen.setStringPainted(true);
        pgBarSplashScreen.setBackground(new java.awt.Color(255, 255, 255));
        pgBarSplashScreen.setForeground(new java.awt.Color(0, 0, 0));

        lblLoading.setBackground(java.awt.Color.black);
        lblLoading.setFont(new java.awt.Font("Savoye LET", 0, 24)); // NOI18N
        lblLoading.setForeground(new java.awt.Color(245, 216, 147));
        lblLoading.setText("Loading...");

        javax.swing.GroupLayout pnlMainLoadingScreenLayout = new javax.swing.GroupLayout(pnlMainLoadingScreen);
        pnlMainLoadingScreen.setLayout(pnlMainLoadingScreenLayout);
        pnlMainLoadingScreenLayout.setHorizontalGroup(
            pnlMainLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblLoadingLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLoadingScreenLayout.createSequentialGroup()
                .addContainerGap(288, Short.MAX_VALUE)
                .addGroup(pnlMainLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLoading)
                    .addComponent(pgBarSplashScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(270, 270, 270))
        );
        pnlMainLoadingScreenLayout.setVerticalGroup(
            pnlMainLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLoadingScreenLayout.createSequentialGroup()
                .addComponent(lblLoadingLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pgBarSplashScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblLoading)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pnlMainLoadingScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pnlMainLoadingScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    /**
     * Initializes the layout for the JewelleryApp using a CardLayout. 
     * Adds panels for different screens (Loading, Login, Main) to the layout.
     * Initially displays the loading screen.
     */
    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers
        getContentPane().add(pnlMainLoadingScreen, "LoadingScreen");
        getContentPane().add(pnlLoginScreen, "LoginScreen");
        getContentPane().add(pnlMainScreen, "MainScreen");

        // Start with the loading screen
        cardLayout.show(getContentPane(), "LoadingScreen");
    }

    /**
     * Initializes the jewellery data by populating the jewelleryList with initial data. 
     * Calls methods to load data for different jewellery types: necklace, bracelet, ring, and earrings.
     */
    private void initializeData() {
        jewelleryList = new ArrayList();
        initialNecklaceData();
        initialBraceletData();
        initialRingData();
        initialEarringsData();
    }

    /**
     * Initializes the necklace data by adding predefined JewelleryModel objects to the necklaceList. 
     * Each item represents a different necklace with attributes such as code, name, material, carat weight, stock, cost, and type. 
     * After adding the data, it loads the list into the table for display.
     */
    private void initialNecklaceData() {
        necklaceList.add(new JewelleryModel(3586825, "Divas Dream Necklace", "Rose Gold", 1.45, 18, 25, 22900, "Necklace"));
        necklaceList.add(new JewelleryModel(3557879, "Serpenti Viper Necklace", "Yellow Gold", 0.13, 18, 55, 10500, "Necklace"));
        necklaceList.add(new JewelleryModel(3557943, "BZero Necklace", "White Gold", 0.63, 22, 45, 15900, "Necklace"));
        necklaceList.add(new JewelleryModel(3545362, "Fiorever Necklace", "White Gold", 8.81, 18, 20, 13000, "Necklace"));
        necklaceList.add(new JewelleryModel(3535983, "Snake Necklace", "Yellow Gold", 0, 18, 27, 24000, "Necklace"));
        loadListToTable(necklaceList, tblNecklace);
    }

    /**
     * Initializes the bracelet data by adding predefined JewelleryModel objects to the braceletList. 
     * Each item represents a different bracelet with attributes such as code, name, material, carat weight, stock, cost, and type. 
     * After adding the data, it loads the list into the table for display.
     */
    private void initialBraceletData() {
        braceletList.add(new JewelleryModel(3534566, "Eternal N Bracelet", "Beige Gold", 0.38, 18, 32, 10400, "Bracelet"));
        braceletList.add(new JewelleryModel(3589679, "Trinity Bracelet", "White Gold", 0.35, 18, 39, 11100, "Bracelet"));
        braceletList.add(new JewelleryModel(3532564, "Winston Gates Rose Gold", "Rose Gold", 0.29, 22, 24, 11800, "Bracelet"));
        braceletList.add(new JewelleryModel(3534576, "Love Bracelet", "Yellow Gold", 0, 18, 28, 7350, "Bracelet"));
        braceletList.add(new JewelleryModel(3539756, "TuttiTutti Bracelet", "Yellow Gold", 2.91, 18, 36, 106000, "Bracelet"));
        loadListToTable(braceletList, tblBracelet);
    }

    /**
     * Initializes the ring data by adding predefined JewelleryModel objects to the ringList. 
     * Each item represents a different ring with attributes such as code, name, material, carat weight, stock, cost, and type. 
     * After adding the data, it loads the list into the table for display.
     */
    private void initialRingData() {
        ringList.add(new JewelleryModel(3543217, "Lily Cluster", "Rose Gold", 0.41, 18, 50, 53000, "Ring"));
        ringList.add(new JewelleryModel(3532653, "Grain De Cafe", "Yellow Gold", 0.45, 18, 40, 34000, "Ring"));
        ringList.add(new JewelleryModel(3536458, "Eternal Gold Bow Signet", "Rose Gold", 0.41, 18, 30, 45000, "Ring"));
        ringList.add(new JewelleryModel(3547320, "Serpenti Viper Ring", "Yellow Gold", 0.41, 18, 15, 5000, "Ring"));
        ringList.add(new JewelleryModel(3501384, "Soleste Ring", "Platinum", 0.70, 22, 36, 8800, "Ring"));
        loadListToTable(ringList, tblRings);
    }

    /**
     * Initializes the earrings data by adding predefined JewelleryModel objects to the earringsList. 
     * Each item represents a different earring with attributes such as code, name, material, carat weight, stock, cost, and type. 
     * After adding the data, it loads the list into the table for display.
     */
    private void initialEarringsData() {
        earringsList.add(new JewelleryModel(3567218, "Panthere De Cartier", "Rose Gold", 3.44, 18, 36, 178000, "EarRings"));
        earringsList.add(new JewelleryModel(3563521, "Extrait De Camelia", "Yellow Gold", 0.09, 18, 39, 6000, "EarRings"));
        earringsList.add(new JewelleryModel(3501472, "Eternal Gold Bow", "Rose Gold", 0, 18, 10, 5000, "EarRings"));
        earringsList.add(new JewelleryModel(3592840, "Hoop Earrings", "White Gold", 0.42, 18, 46, 4700, "EarRings"));
        earringsList.add(new JewelleryModel(3501380, "Knot Drop Earrings", "White Gold", 0.45, 18, 22, 9200, "EarRings"));
        loadListToTable(earringsList, tblEarRings);
    }

    /**
     * Loads the given list of jewellery data into the provided JTable. 
     * The method clears any existing rows in the table and then populates it with the data from the jewelleryList.
     *
     * @param jewelleryList The list of JewelleryModel objects to be displayed in the table.
     * @param table The JTable where the jewellery data will be displayed.
     */
    private void loadListToTable(List<JewelleryModel> jewelleryList, JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();

        // Clear existing rows if needed
        model.setRowCount(0);

        // Populate the table with jewellery data
        jewelleryList.forEach(jewellery -> model.addRow(new Object[]{
            jewellery.getCode(),
            jewellery.getName(),
            jewellery.getMaterial(),
            jewellery.getdCarat(),
            jewellery.getgCarat(),
            jewellery.getStock(),
            jewellery.getCost(),
            jewellery.getjType()
        }));
    }

    /**
     * Starts a background task that simulates a progress bar update during the loading screen. 
     * The method uses a `SwingWorker` to run a task in the background, updating the progress bar 
     * from 0 to 100 in increments while simulating a delay. 
     * Once the progress reaches 100%, it switches the screen to the login screen.
     */
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker = new javax.swing.SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(30); // Simulated delay for progress bar
                    publish(i);
                }
                return null;
            }

            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                pgBarSplashScreen.setValue(progress);
            }

            @Override
            protected void done() {
                loadScreen("LoginScreen"); // Switch to login screen
            }
        };
        worker.execute();
    }

    /**
     * Clears all the input fields on the form by resetting their text values to an empty string. 
     * This method is typically used to reset the form after a
     * user submits data or when initializing a new record to be filled in.
     */
    private void clearForm() {
        txtFldPCode.setText("");
        txtFldPName.setText("");
        txtFldMaterial.setText("");
        txtFldDiamond.setText("");
        txtFldGold.setText("");
        txtFldStock.setText("");
        txtFldTCost.setText("");
        txtFldJType.setText("");
    }

    /**
     * Switches the currently displayed screen to the specified screen using CardLayout. 
     * This method is used to navigate between different views or screens in the application.
     *
     * @param screenName The name of the screen to be displayed.
     */
    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }

    /**
     * Handles the action event when the user clicks the login button. 
     * It retrieves the username and password entered by the user, checks if either
     * field is empty, and validates the credentials. 
     * If the credentials are correct, the main screen is loaded. 
     * Otherwise, appropriate error messages are displayed.
     *
     * @param evt The action event triggered by the login button click.
     */
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {                                         
        //Get the username and password input
        String username = txtFldUsername.getText();
        String password = new String(pwdFldPwd.getPassword());

        //Check if username or password is empty
        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(pnlLoginScreen, "Empty! Please enter both username and password.", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else if (!username.equals("veloura") || !password.equals("veloura")) { // Check if the username or password is correct 
            JOptionPane.showMessageDialog(pnlLoginScreen, "The password or username is incorrect.", "Error", JOptionPane.ERROR_MESSAGE);
        } //if credentials are correct, proceed to load the main screen
        else {
            loadScreen("MainScreen");
        }
    }                                        

    /**
     * Handles the action event when the user clicks the logout button. 
     * It clears the username and password fields and then switches back to the login screen.
     *
     * @param evt The action event triggered by the logout button click.
     */
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {                                          
        txtFldUsername.setText("");
        pwdFldPwd.setText("");
        loadScreen("LoginScreen");
    }                                         

    /**
     * Validates the inputs for a jewellery product. 
     * It checks the product's code, name, material, diamond carat, gold carat, stock, cost, and type to
     * ensure they meet the required criteria. 
     * If any validation fails, an error message is added to the validation message string.
     *
     * @param code The product code, which must start with '35' and contain exactly 7 digits.
     * @param name The product name, which should only contain letters.
     * @param material The material of the product, which must be one of: 
     * yellow gold, beige gold, white gold, rose gold, platinum, or silver.
     * @param dCarat The diamond carat value, which must contain a maximum of 2 decimal digits.
     * @param gCarat The gold carat value, which must be 18, 22, or 24.
     * @param stock The stock amount, which should not exceed 3 digits.
     * @param cost The product cost, which should not exceed 8 digits.
     * @param jType The jewellery type, which must be one of: necklace, bracelet, ring, or earrings.
     *
     * @return A string containing validation messages for any failed validations.
     */
    private String validateInputs(int code, String name, String material, double dCarat, int gCarat, int stock, int cost, String jType) {
        StringBuilder productValidateMsg = new StringBuilder();

        if (!ValidationUtil.validateCode(code)) {
            productValidateMsg.append("The product code should start with '35' and contain exactly 7 digits.\n");
        }
        if (!ValidationUtil.validateName(name)) {
            productValidateMsg.append("The product name should only contain letters.\n");
        }
        if (!ValidationUtil.validateMaterial(material)) {
            productValidateMsg.append("The material should either be yellow gold, beige gold, white gold, rose gold, platinum, silver.\n");
        }
        if (!ValidationUtil.validateDCarat(dCarat)) {
            productValidateMsg.append("The diamond carats should contain a maximum of 2 decimal digits.\n");
        }
        if (!ValidationUtil.validateGCarat(gCarat)) {
            productValidateMsg.append("The gold carats should be either 18, 22, or 24.\n");
        }
        if (!ValidationUtil.validateStock(stock)) {
            productValidateMsg.append("The stock limit has exceeded and should contain a maximum of 3 digits.\n");
        }
        if (!ValidationUtil.validateCost(cost)) {
            productValidateMsg.append("The product cost must not exceed 8 digits.\n");
        }
        if (!ValidationUtil.validateType(jType)) {
            productValidateMsg.append("Please enter necklace, bracelet, ring, or earrings as your product type.\n");
        }

        return productValidateMsg.toString();
    }

    /**
     * Handles the action event for deleting a product from the jewellery lists.
     * Prompts the admin to enter a product code, validates the input, and
     * attempts to delete the product from the appropriate jewellery list
     * (necklace, bracelet, ring, or earrings) based on the entered product code. 
     * If successful, updates the corresponding table and shows a success message. 
     * If no matching product is found, an error message is displayed.
     * If the input is invalid, an error message is shown.
     *
     * @param evt The event that triggered the action (clicking the delete button).
     */
    private void btnDeleteDetailsActionPerformed(java.awt.event.ActionEvent evt) {                                                 

        String delete = JOptionPane.showInputDialog(pnlAdminControl, "Enter the product code:");

        if (delete == null || delete.trim().isEmpty()) {
            JOptionPane.showMessageDialog(pnlAdminControl, "Please enter the product code in the empty space.", "Information", JOptionPane.INFORMATION_MESSAGE);
            return; // Exit if input is invalid
        }
        try {
            int del = Integer.parseInt(delete);

            // remove data from table
            boolean isDeletedFromNecklace = necklaceList.removeIf(necklace -> necklace.getCode() == del);
            boolean isDeletedFromBracelet = braceletList.removeIf(bracelet -> bracelet.getCode() == del);
            boolean isDeletedFromRing = ringList.removeIf(ring -> ring.getCode() == del);
            boolean isDeletedFromEarrings = earringsList.removeIf(earrings -> earrings.getCode() == del);

            if (isDeletedFromNecklace) {
                // Display the necklace data after the deletion
                loadListToTable(necklaceList, tblNecklace);
                JOptionPane.showMessageDialog(pnlAdminControl, "The product has been removed!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else if (isDeletedFromBracelet) {
                // Display the bracelet data after the deletion
                loadListToTable(braceletList, tblBracelet);
                JOptionPane.showMessageDialog(pnlAdminControl, "The product has been removed!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else if (isDeletedFromRing) {
                // Display the ring data after the deletion
                loadListToTable(ringList, tblRings);
                JOptionPane.showMessageDialog(pnlAdminControl, "The product has been removed!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else if (isDeletedFromEarrings) {
                // Display the earrings data after the deletion
                loadListToTable(earringsList, tblEarRings);
                JOptionPane.showMessageDialog(pnlAdminControl, "The product has been removed!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(pnlAdminControl, "The product doesn't exist!", "Alert", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(pnlAdminControl, "Please enter a valid product code (number).", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                                

    /**
     * Updates the details of a specific jewellery item in the given list based
     * on the provided product code and type. 
     * The method searches for a jewellery item with a matching code and type, and 
     * if found, updates its name, material, diamond carat, gold carat, stock, and cost. 
     * Once updated, the jewellery list is reloaded into the corresponding table.
     *
     * @param jewelleryList The list of jewellery items where the search and update will be performed.
     * @param jCode The unique code of the jewellery item to be updated.
     * @param pName The new name to set for the jewellery item.
     * @param pMaterial The new material to set for the jewellery item.
     * @param dCarat The new diamond carat value to set for the jewellery item.
     * @param gCarat The new gold carat value to set for the jewellery item.
     * @param jStock The new stock value to set for the jewellery item.
     * @param jCost The new cost value to set for the jewellery item.
     * @param pType The type of jewellery (necklace, bracelet, ring, or earrings) to ensure correct matching.
     * @param table The table component where the updated jewellery list will be displayed.
     *
     * @return true if the jewellery item was found and successfully updated,
     * false if no matching item was found.
     */
    private boolean updateJewelleryDetails(List<JewelleryModel> jewelleryList, int jCode, String pName, String pMaterial,
            double dCarat, int gCarat, int jStock, int jCost, String pType, JTable table) {
        for (JewelleryModel jewellery : jewelleryList) {
            if (jewellery.getCode() == jCode && jewellery.getjType().equalsIgnoreCase(pType)) {
                jewellery.setName(pName);
                jewellery.setMaterial(pMaterial);
                jewellery.setdCarat(dCarat);
                jewellery.setgCarat(gCarat);
                jewellery.setStock(jStock);
                jewellery.setCost(jCost);
                loadListToTable(jewelleryList, table);
                return true;    // if code is found and list is updated
            }
        }
        return false;   // if code is not found and list is not updated
    }

    /**
     * Handles the action performed when the "Update Details" button is clicked.
     * This method validates the input fields, parses the input values, and
     * updates the corresponding jewellery item in the jewellery lists
     * (necklace, bracelet, ring, or earrings) if a matching product code and
     * type are found. 
     * If the update is successful, it displays a success
     * message; otherwise, an error message is shown.
     *
     * @param evt The action event triggered when the "Update Details" button is clicked.
     */
    private void btnUpdateDetailsActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        String pCode = txtFldPCode.getText();
        String pName = txtFldPName.getText();
        String pMaterial = txtFldMaterial.getText();
        String pDCarat = txtFldDiamond.getText();
        String pGCarat = txtFldGold.getText();
        String pStock = txtFldStock.getText();
        String pCost = txtFldTCost.getText();
        String pType = txtFldJType.getText();

        if (pCode.isEmpty() || pName.isEmpty() || pMaterial.isEmpty() || pDCarat.isEmpty()
                || pGCarat.isEmpty() || pStock.isEmpty() || pCost.isEmpty() || pType.isEmpty()) {
            JOptionPane.showMessageDialog(pnlAdminControl, "Please enter all details.", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                int jCode = Integer.parseInt(pCode);
                double dCarat = Double.parseDouble(pDCarat);
                int gCarat = Integer.parseInt(pGCarat);
                int jStock = Integer.parseInt(pStock);
                int jCost = Integer.parseInt(pCost);

                String validationErrors = validateInputs(jCode, pName, pMaterial, dCarat, gCarat, jStock, jCost, pType);

                if (!validationErrors.isEmpty()) {
                    JOptionPane.showMessageDialog(this, validationErrors);
                    return;
                } else {
                    boolean isUpdated = updateJewelleryDetails(necklaceList, jCode, pName, pMaterial, dCarat, gCarat, jStock, jCost, pType, tblNecklace)
                            || updateJewelleryDetails(braceletList, jCode, pName, pMaterial, dCarat, gCarat, jStock, jCost, pType, tblBracelet)
                            || updateJewelleryDetails(ringList, jCode, pName, pMaterial, dCarat, gCarat, jStock, jCost, pType, tblRings)
                            || updateJewelleryDetails(earringsList, jCode, pName, pMaterial, dCarat, gCarat, jStock, jCost, pType, tblEarRings);

                    // Check if the jewellery is updated
                    if (isUpdated) {
                        JOptionPane.showMessageDialog(pnlAdminControl, "Jewellery details updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                        clearForm();
                    } else {
                        JOptionPane.showMessageDialog(pnlAdminControl, "Jewellery not found. Please enter a valid product code along with its corresponding type.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (NumberFormatException n) {
                JOptionPane.showMessageDialog(pnlAdminControl, "Invalid input. Please enter valid numbers.", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }                                                

    /**
     * Handles the action performed when the "Add Details" button is clicked.
     * This method validates the input fields, parses the input values, checks
     * if the jewellery item already exists, and then adds the new jewellery
     * item to the appropriate list (necklace, bracelet, ring, or earrings). 
     * It updates the corresponding table and displays a success or warning message based on the result.
     *
     * @param evt The action event triggered when the "Add Details" button is clicked.
     */
    private void btnAddDetailsActionPerformed(java.awt.event.ActionEvent evt) {                                              
        String pCode = txtFldPCode.getText();
        String pName = txtFldPName.getText();
        String pMaterial = txtFldMaterial.getText();
        String pDCarat = txtFldDiamond.getText();
        String pGCarat = txtFldGold.getText();
        String pStock = txtFldStock.getText();
        String pCost = txtFldTCost.getText();
        String pType = txtFldJType.getText();

        if (pCode.isEmpty() || pName.isEmpty() || pMaterial.isEmpty() || pDCarat.isEmpty() || pGCarat.isEmpty()
                || pStock.isEmpty() || pCost.isEmpty() || pType.isEmpty()) {
            JOptionPane.showMessageDialog(pnlAdminControl, "Please enter all details.", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                int jCode = Integer.parseInt(pCode);
                double dCarat = Double.parseDouble(pDCarat);
                int gCarat = Integer.parseInt(pGCarat);
                int jStock = Integer.parseInt(pStock);
                int jCost = Integer.parseInt(pCost);

                String validationErrors = validateInputs(jCode, pName, pMaterial, dCarat, gCarat, jStock, jCost, pType);

                if (!validationErrors.isEmpty()) {
                    JOptionPane.showMessageDialog(this, validationErrors);
                    return;
                } else {
                    //Checks if the jewellery already exists
                    boolean jewelleryExists = false;

                    for (JewelleryModel necklace : necklaceList) {
                        if (necklace.getCode() == jCode) {
                            jewelleryExists = true;
                            break;
                        }
                    }

                    for (JewelleryModel bracelet : braceletList) {
                        if (bracelet.getCode() == jCode) {
                            jewelleryExists = true;
                            break;
                        }
                    }

                    for (JewelleryModel ring : ringList) {
                        if (ring.getCode() == jCode) {
                            jewelleryExists = true;
                            break;
                        }
                    }

                    for (JewelleryModel earrings : earringsList) {
                        if (earrings.getCode() == jCode) {
                            jewelleryExists = true;
                            break;
                        }
                    }

                    // Displays a pop-up box if the jewellery already exists
                    if (jewelleryExists) {
                        JOptionPane.showMessageDialog(pnlAdminControl, "The Jewellery already exists.", "Warning", JOptionPane.WARNING_MESSAGE);
                    } else {
                        // Check the jewellery type and insert into the respective table
                        if ("necklace".equals(pType.toLowerCase())) {
                            // adds data into necklaceList and necklace table
                            necklaceList.add(new JewelleryModel(jCode, pName, pMaterial, dCarat, gCarat, jStock, jCost, pType));
                            loadListToTable(necklaceList, tblNecklace);
                        } else if ("bracelet".equals(pType.toLowerCase())) {
                            // adds data into braceletList and bracelet table
                            braceletList.add(new JewelleryModel(jCode, pName, pMaterial, dCarat, gCarat, jStock, jCost, pType));
                            loadListToTable(braceletList, tblBracelet);
                        } else if ("ring".equals(pType.toLowerCase())) {
                            // adds data into ringList and ring table
                            ringList.add(new JewelleryModel(jCode, pName, pMaterial, dCarat, gCarat, jStock, jCost, pType));
                            loadListToTable(ringList, tblRings);
                        } else if ("earrings".equals(pType.toLowerCase())) {
                            // adds data into earringsList and earrings table
                            earringsList.add(new JewelleryModel(jCode, pName, pMaterial, dCarat, gCarat, jStock, jCost, pType));
                            loadListToTable(earringsList, tblEarRings);
                        }
                        JOptionPane.showMessageDialog(pnlAdminControl, "Jewellery details added successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                        clearForm();
                    }
                }
            } catch (NumberFormatException n) {
                JOptionPane.showMessageDialog(pnlAdminControl, "Invalid input. Please enter valid numbers.", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }                                             

    /**
     * Handles the action performed when the "Submit" button is clicked on the
     * Contact Us form. This method validates the input fields, ensures that all
     * required fields are filled, and displays a confirmation message. 
     * It also clears the form fields after successful submission.
     *
     * @param evt The action event triggered when the "Submit" button is clicked.
     */
    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {                                          
        String fullName = txtFldFName.getText();
        String email = txtFldEmail.getText();
        String phoneNo = txtFldPhNo.getText();
        String message = txtFldMessage.getText();

        if (fullName.isEmpty() || email.isEmpty() || phoneNo.isEmpty()) {
            JOptionPane.showMessageDialog(pnlContactUs, "Please provide all required information.", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(pnlContactUs, "Your personal information has been successfully submitted.", "Information Submitted", JOptionPane.INFORMATION_MESSAGE);
            txtFldFName.setText("");
            txtFldEmail.setText("");
            txtFldPhNo.setText("");
            txtFldMessage.setText("");
        }
    }                                         

    /**
     * Handles the mouse click event on the "Search" label for necklaces. 
     * This method sorts the necklace list by name, performs a binary search to find
     * the necklace based on user input, and displays the details of the found
     * product in a message dialog. 
     * If the product is not found, an error message is shown.
     *
     * @param evt The mouse event triggered when the "Search" label is clicked.
     */
    private void lblSearchNMouseClicked(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
        SelectionSort sort = new SelectionSort();
        List<JewelleryModel> sortedList = sort.sortByName(necklaceList, true);
        BinarySearch search = new BinarySearch();

        JewelleryModel searchedModel = search.searchByNameNecklace(txtFldSearchN.getText(), sortedList, 0, sortedList.size() - 1);
        if (searchedModel != null) {
            JOptionPane.showMessageDialog(pnlAdminControl,
                    "Product Code: " + searchedModel.getCode() + "\n"
                    + "Product Name: " + searchedModel.getName() + "\n"
                    + "Product Material: " + searchedModel.getMaterial() + "\n"
                    + "Diamonds (Carats): " + searchedModel.getdCarat() + "\n"
                    + "Gold (K): " + searchedModel.getgCarat() + "\n"
                    + "Stock: " + searchedModel.getStock() + "\n"
                    + "Total Cost ($): " + searchedModel.getCost());
        } else {
            JOptionPane.showMessageDialog(pnlAdminControl, "Product not found/doesn't exist.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                       

    /**
     * Handles the mouse click event on the "Search" label for bracelets. 
     * This method sorts the bracelet list by name, performs a binary search to find
     * the bracelet based on user input, and displays the details of the found
     * product in a message dialog. 
     * If the product is not found, an error message is shown.
     *
     * @param evt The mouse event triggered when the "Search" label is clicked.
     */
    private void lblSearchBMouseClicked(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
        SelectionSort sort = new SelectionSort();
        List<JewelleryModel> sortedList = sort.sortByName(braceletList, true);
        BinarySearch search = new BinarySearch();

        JewelleryModel searchedModel = search.searchByNameBracelet(txtFldSearchB.getText(), sortedList, 0, sortedList.size() - 1);
        if (searchedModel != null) {
            JOptionPane.showMessageDialog(pnlAdminControl,
                    "Product Code: " + searchedModel.getCode() + "\n"
                    + "Product Name: " + searchedModel.getName() + "\n"
                    + "Product Material: " + searchedModel.getMaterial() + "\n"
                    + "Diamonds (Carats): " + searchedModel.getdCarat() + "\n"
                    + "Gold (K): " + searchedModel.getgCarat() + "\n"
                    + "Stock: " + searchedModel.getStock() + "\n"
                    + "Total Cost ($): " + searchedModel.getCost());
        } else {
            JOptionPane.showMessageDialog(pnlAdminControl, "Product not found/doesn't exist.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                       

    /**
     * Handles the mouse click event on the "Search" label for rings. 
     * This method sorts the ring list by name, performs a binary search to find the
     * ring based on user input, and displays the details of the found product
     * in a message dialog. 
     * If the product is not found, an error message is shown.
     *
     * @param evt The mouse event triggered when the "Search" label is clicked.
     */
    private void lblSearchRMouseClicked(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
        SelectionSort sort = new SelectionSort();
        List<JewelleryModel> sortedList = sort.sortByName(ringList, true);
        BinarySearch search = new BinarySearch();

        JewelleryModel searchedModel = search.searchByNameRing(txtFldSearchR.getText(), sortedList, 0, sortedList.size() - 1);
        if (searchedModel != null) {
            JOptionPane.showMessageDialog(pnlAdminControl,
                    "Product Code: " + searchedModel.getCode() + "\n"
                    + "Product Name: " + searchedModel.getName() + "\n"
                    + "Product Material: " + searchedModel.getMaterial() + "\n"
                    + "Diamonds (Carats): " + searchedModel.getdCarat() + "\n"
                    + "Gold (K): " + searchedModel.getgCarat() + "\n"
                    + "Stock: " + searchedModel.getStock() + "\n"
                    + "Total Cost ($): " + searchedModel.getCost());
        } else {
            JOptionPane.showMessageDialog(pnlAdminControl, "Product not found/doesn't exist.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                       

    /**
     * Handles the mouse click event on the "Search" label for earrings. 
     * This method sorts the earrings list by name, performs a binary search to find
     * the earring based on user input, and displays the details of the found
     * product in a message dialog. 
     * If the product is not found, an error message is shown.
     *
     * @param evt The mouse event triggered when the "Search" label is clicked.
     */
    private void lblSearchERMouseClicked(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        SelectionSort sort = new SelectionSort();
        List<JewelleryModel> sortedList = sort.sortByName(earringsList, true);
        BinarySearch search = new BinarySearch();

        JewelleryModel searchedModel = search.searchByNameEarrings(txtFldSearchER.getText(), sortedList, 0, sortedList.size() - 1);
        if (searchedModel != null) {
            JOptionPane.showMessageDialog(pnlAdminControl,
                    "Product Code: " + searchedModel.getCode() + "\n"
                    + "Product Name: " + searchedModel.getName() + "\n"
                    + "Product Material: " + searchedModel.getMaterial() + "\n"
                    + "Diamonds (Carats): " + searchedModel.getdCarat() + "\n"
                    + "Gold (K): " + searchedModel.getgCarat() + "\n"
                    + "Stock: " + searchedModel.getStock() + "\n"
                    + "Total Cost ($): " + searchedModel.getCost());
        } else {
            JOptionPane.showMessageDialog(pnlAdminControl, "Product not found/doesn't exist.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                        

    /**
     * Handles the action event triggered when the user selects an option from
     * the "Necklace" sorting combo box. 
     * This method sorts the `necklaceList` based on the selected criteria (e.g., by product code, name, or total
     * cost) using different sorting algorithms 
     * (SelectionSort, InsertionSort, and MergeSort). 
     * The sorted list is then displayed in the corresponding table.
     *
     * @param evt The action event triggered when the user selects an option from the combo box.
     */
    private void cbNecklaceActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        SelectionSort selectionSort = new SelectionSort();
        InsertionSort insertionSort = new InsertionSort();
        MergeSort mergeSort = new MergeSort();
        String selected = (String) cbNecklace.getSelectedItem();
        if ("Code (Asc)".equals(selected)) {
            // Sort by Product Code (Ascending)
            ArrayList<JewelleryModel> sortedList = insertionSort.sortByCode(necklaceList, true);
            loadListToTable(sortedList, tblNecklace);
        } else if ("Code (Desc)".equals(selected)) {
            // Sort by Product Code (Descending)
            ArrayList<JewelleryModel> sortedList = insertionSort.sortByCode(necklaceList, false);
            loadListToTable(sortedList, tblNecklace);
        } else if ("Name (A-Z)".equals(selected)) {
            // Sort by Product Name (A-Z)
            ArrayList<JewelleryModel> sortedList = selectionSort.sortByName(necklaceList, true);
            loadListToTable(sortedList, tblNecklace);
        } else if ("Name (Z-A)".equals(selected)) {
            // Sort by Product Name (Z-A)
            ArrayList<JewelleryModel> sortedList = selectionSort.sortByName(necklaceList, false);
            loadListToTable(sortedList, tblNecklace);
        } else if ("Total Cost (Cheap)".equals(selected)) {
            // Sort by Total Cost (Cheap)
            ArrayList<JewelleryModel> sortedList = mergeSort.sortByTotalCost(necklaceList, true);
            loadListToTable(sortedList, tblNecklace);
        } else if ("Total Cost (Expensive)".equals(selected)) {
            // Sort by Total Cost (Expensive)
            ArrayList<JewelleryModel> sortedList = mergeSort.sortByTotalCost(necklaceList, false);
            loadListToTable(sortedList, tblNecklace);
        }
    }                                          

    /**
     * Handles the action event triggered when the user selects an option from
     * the "Bracelet" sorting combo box. 
     * This method sorts the `braceletList` based on the selected criteria (e.g., by product code, name, or total
     * cost) using different sorting algorithms 
     * (SelectionSort, InsertionSort, and MergeSort). 
     * The sorted list is then displayed in the corresponding table.
     *
     * @param evt The action event triggered when the user selects an option from the combo box.
     */
    private void cbBraceletActionPerformed(java.awt.event.ActionEvent evt) {                                           
        SelectionSort selectionSort = new SelectionSort();
        InsertionSort insertionSort = new InsertionSort();
        MergeSort mergeSort = new MergeSort();
        String selected = (String) cbBracelet.getSelectedItem();
        if ("Code (Asc)".equals(selected)) {
            // Sort by Product Code (Ascending)
            ArrayList<JewelleryModel> sortedList = insertionSort.sortByCode(braceletList, true);
            loadListToTable(sortedList, tblBracelet);
        } else if ("Code (Desc)".equals(selected)) {
            // Sort by Product Code (Descending)
            ArrayList<JewelleryModel> sortedList = insertionSort.sortByCode(braceletList, false);
            loadListToTable(sortedList, tblBracelet);
        } else if ("Name (A-Z)".equals(selected)) {
            // Sort by Product Name (A-Z)
            ArrayList<JewelleryModel> sortedList = selectionSort.sortByName(braceletList, true);
            loadListToTable(sortedList, tblBracelet);
        } else if ("Name (Z-A)".equals(selected)) {
            // Sort by Product Name (Z-A)
            ArrayList<JewelleryModel> sortedList = selectionSort.sortByName(braceletList, false);
            loadListToTable(sortedList, tblBracelet);
        } else if ("Total Cost (Cheap)".equals(selected)) {
            // Sort by Total Cost (Cheap)
            ArrayList<JewelleryModel> sortedList = mergeSort.sortByTotalCost(braceletList, true);
            loadListToTable(sortedList, tblBracelet);
        } else if ("Total Cost (Expensive)".equals(selected)) {
            // Sort by Total Cost (Expensive)
            ArrayList<JewelleryModel> sortedList = mergeSort.sortByTotalCost(braceletList, false);
            loadListToTable(sortedList, tblBracelet);
        }
    }                                          

    /**
     * Handles the action event triggered when the user selects an option from
     * the "Ring" sorting combo box. 
     * This method sorts the `ringList` based on the selected criteria (e.g., by product code, name, or total 
     * cost) using different sorting algorithms 
     * (SelectionSort, InsertionSort, and MergeSort). 
     * The sorted list is then displayed in the corresponding table.
     *
     * @param evt The action event triggered when the user selects an option from the combo box.
     */
    private void cbRingActionPerformed(java.awt.event.ActionEvent evt) {                                       
        SelectionSort selectionSort = new SelectionSort();
        InsertionSort insertionSort = new InsertionSort();
        MergeSort mergeSort = new MergeSort();
        String selected = (String) cbRing.getSelectedItem();
        if ("Code (Asc)".equals(selected)) {
            // Sort by Product Code (Ascending)
            ArrayList<JewelleryModel> sortedList = insertionSort.sortByCode(ringList, true);
            loadListToTable(sortedList, tblRings);
        } else if ("Code (Desc)".equals(selected)) {
            // Sort by Product Code (Descending)
            ArrayList<JewelleryModel> sortedList = insertionSort.sortByCode(ringList, false);
            loadListToTable(sortedList, tblRings);
        } else if ("Name (A-Z)".equals(selected)) {
            // Sort by Product Name (A-Z)
            ArrayList<JewelleryModel> sortedList = selectionSort.sortByName(ringList, true);
            loadListToTable(sortedList, tblRings);
        } else if ("Name (Z-A)".equals(selected)) {
            // Sort by Product Name (Z-A)
            ArrayList<JewelleryModel> sortedList = selectionSort.sortByName(ringList, false);
            loadListToTable(sortedList, tblRings);
        } else if ("Total Cost (Cheap)".equals(selected)) {
            // Sort by Total Cost (Cheap)
            ArrayList<JewelleryModel> sortedList = mergeSort.sortByTotalCost(ringList, true);
            loadListToTable(sortedList, tblRings);
        } else if ("Total Cost (Expensive)".equals(selected)) {
            // Sort by Total Cost (Expensive)
            ArrayList<JewelleryModel> sortedList = mergeSort.sortByTotalCost(ringList, false);
            loadListToTable(sortedList, tblRings);
        }
    }                                      

    /**
     * Handles the action event triggered when the user selects an option from
     * the "Earrings" sorting combo box. 
     * This method sorts the `earringsList`
     * based on the selected criteria (e.g., by product code, name, or total
     * cost) using different sorting algorithms 
     * (SelectionSort, InsertionSort, and MergeSort). 
     * The sorted list is then displayed in the corresponding table.
     *
     * @param evt The action event triggered when the user selects an option from the combo box.
     */
    private void cbEarringsActionPerformed(java.awt.event.ActionEvent evt) {                                           
        SelectionSort selectionSort = new SelectionSort();
        InsertionSort insertionSort = new InsertionSort();
        MergeSort mergeSort = new MergeSort();
        String selected = (String) cbEarrings.getSelectedItem();
        if ("Code (Asc)".equals(selected)) {
            // Sort by Product Code (Ascending)
            ArrayList<JewelleryModel> sortedList = insertionSort.sortByCode(earringsList, true);
            loadListToTable(sortedList, tblEarRings);
        } else if ("Code (Desc)".equals(selected)) {
            // Sort by Product Code (Descending)
            ArrayList<JewelleryModel> sortedList = insertionSort.sortByCode(earringsList, false);
            loadListToTable(sortedList, tblEarRings);
        } else if ("Name (A-Z)".equals(selected)) {
            // Sort by Product Name (A-Z)
            ArrayList<JewelleryModel> sortedList = selectionSort.sortByName(earringsList, true);
            loadListToTable(sortedList, tblEarRings);
        } else if ("Name (Z-A)".equals(selected)) {
            // Sort by Product Name (Z-A)
            ArrayList<JewelleryModel> sortedList = selectionSort.sortByName(earringsList, false);
            loadListToTable(sortedList, tblEarRings);
        } else if ("Total Cost (Cheap)".equals(selected)) {
            // Sort by Total Cost (Cheap)
            ArrayList<JewelleryModel> sortedList = mergeSort.sortByTotalCost(earringsList, true);
            loadListToTable(sortedList, tblEarRings);
        } else if ("Total Cost (Expensive)".equals(selected)) {
            // Sort by Total Cost (Expensive)
            ArrayList<JewelleryModel> sortedList = mergeSort.sortByTotalCost(earringsList, false);
            loadListToTable(sortedList, tblEarRings);
        }
    }                                          

    /**
     * The entry point of the JewelleryApp application. 
     * Sets the look and feel of the UI, initializes the application form, 
     * and starts any necessary progress indicators.
     *
     * @param args command-line arguments passed when the program is executed.
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JewelleryApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JewelleryApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JewelleryApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JewelleryApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        JewelleryApp app = new JewelleryApp();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            app.setVisible(true);
        });

        app.startProgress();
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnAddDetails;
    private javax.swing.JLabel btnCopyright;
    private javax.swing.JButton btnDeleteDetails;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnUpdateDetails;
    private javax.swing.JComboBox<String> cbBracelet;
    private javax.swing.JComboBox<String> cbEarrings;
    private javax.swing.JComboBox<String> cbNecklace;
    private javax.swing.JComboBox<String> cbRing;
    private javax.swing.JLabel lblAUline1;
    private javax.swing.JLabel lblAUline2;
    private javax.swing.JLabel lblAUline3;
    private javax.swing.JLabel lblAUline4;
    private javax.swing.JLabel lblAUline5;
    private javax.swing.JLabel lblAUline6;
    private javax.swing.JLabel lblAUline7;
    private javax.swing.JLabel lblAUline8;
    private javax.swing.JLabel lblAUline9;
    private javax.swing.JLabel lblAboutUs;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblCUline1;
    private javax.swing.JLabel lblCUline2;
    private javax.swing.JLabel lblContactUs;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblForgotPwd;
    private javax.swing.JLabel lblHLine1;
    private javax.swing.JLabel lblHLine2;
    private javax.swing.JLabel lblHLine3;
    private javax.swing.JLabel lblHLine4;
    private javax.swing.JLabel lblHeading1;
    private javax.swing.JLabel lblHeading2;
    private javax.swing.JLabel lblJewellery1;
    private javax.swing.JLabel lblJewellery2;
    private javax.swing.JLabel lblJewellery3;
    private javax.swing.JLabel lblLoading;
    private javax.swing.JLabel lblLoadingLogo;
    private javax.swing.JLabel lblLoginLogo;
    private javax.swing.JLabel lblLoginSubTitle;
    private javax.swing.JLabel lblLoginTitle;
    private javax.swing.JLabel lblMail;
    private javax.swing.JLabel lblMainLogo;
    private javax.swing.JLabel lblPhoneNo;
    private javax.swing.JLabel lblReachOut;
    private javax.swing.JLabel lblSearchB;
    private javax.swing.JLabel lblSearchER;
    private javax.swing.JLabel lblSearchN;
    private javax.swing.JLabel lblSearchR;
    private javax.swing.JLabel lblYourInfo;
    private javax.swing.JLabel lnlMainSlogan;
    private javax.swing.JLabel lnlMainSlogan1;
    private javax.swing.JProgressBar pgBarSplashScreen;
    private javax.swing.JPanel pnlAboutUs;
    private javax.swing.JPanel pnlAdminControl;
    private javax.swing.JPanel pnlBracelet;
    private javax.swing.JPanel pnlContactUs;
    private javax.swing.JPanel pnlEarRing;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JPanel pnlJewellery;
    private javax.swing.JPanel pnlLoginLeft;
    private javax.swing.JPanel pnlLoginScreen;
    private javax.swing.JPanel pnlMainBar;
    private javax.swing.JPanel pnlMainInfo;
    private javax.swing.JPanel pnlMainLoadingScreen;
    private javax.swing.JPanel pnlMainScreen;
    private javax.swing.JPanel pnlNecklace;
    private javax.swing.JPanel pnlRing;
    private javax.swing.JPasswordField pwdFldPwd;
    private javax.swing.JScrollPane spTblBracelet;
    private javax.swing.JScrollPane spTblEarRings;
    private javax.swing.JScrollPane spTblNecklace;
    private javax.swing.JScrollPane spTblRings;
    private javax.swing.JTabbedPane tabPaneJ;
    private javax.swing.JTabbedPane tabPaneMain;
    private javax.swing.JTable tblBracelet;
    private javax.swing.JTable tblEarRings;
    private javax.swing.JTable tblNecklace;
    private javax.swing.JTable tblRings;
    private javax.swing.JTextField txtFldDiamond;
    private javax.swing.JTextField txtFldEmail;
    private javax.swing.JTextField txtFldFName;
    private javax.swing.JTextField txtFldGold;
    private javax.swing.JTextField txtFldJType;
    private javax.swing.JTextField txtFldMaterial;
    private javax.swing.JTextField txtFldMessage;
    private javax.swing.JTextField txtFldPCode;
    private javax.swing.JTextField txtFldPName;
    private javax.swing.JTextField txtFldPhNo;
    private javax.swing.JTextField txtFldSearchB;
    private javax.swing.JTextField txtFldSearchER;
    private javax.swing.JTextField txtFldSearchN;
    private javax.swing.JTextField txtFldSearchR;
    private javax.swing.JTextField txtFldStock;
    private javax.swing.JTextField txtFldTCost;
    private javax.swing.JTextField txtFldUsername;
    // End of variables declaration                   
}
